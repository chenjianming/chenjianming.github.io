{"version":3,"sources":["App.js","List.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderChildren","data","url","preview","react_default","a","createElement","src","alt","style","width","duration","ref","audioEl","push","controls","preload","id","order","text","state","theCurrentBroadcast","content","list","title","currentPosition","_this2","params","match","fetch","concat","then","response","json","setState","name","audio","map","item","index","addEventListener","e","pause","play","_this3","position","marginTop","window","innerHeight","height","zIndex","textAlign","borderBottomLeftRadius","borderTopRightRadius","borderTopLeftRadius","borderBottomRightRadius","onClick","console","log","history","goBack","key","Component","List","lessonList","react_router_dom","to","Boolean","location","hostname","routers","react_router","createHashHistory","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a93b4d7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.audioEl = [];\n    this.state = {\n      theCurrentBroadcast: null,\n      content: {\n        list: [],\n        title: '',\n      },\n      currentPosition: null,\n    };\n  }\n\n  componentDidMount() {\n    const {match: {params}} = this.props;\n    fetch(`/json/${params.url}`).then((response) => {\n      return response.json();\n    }).then((data) => {\n      this.setState({\n        content: {\n          list: data.data.content,\n          title: data.data.name,\n        }\n      });\n      const audio = this.audioEl;\n      audio.map((item, index) => {\n        item.addEventListener('playing', (e) => {\n          if (this.state.theCurrentBroadcast) {\n            if (item !== this.state.theCurrentBroadcast) {\n              this.state.theCurrentBroadcast.pause();\n            }\n          }\n          this.setState({\n            theCurrentBroadcast: item,\n            currentPosition: item.id,\n          });\n        });\n        item.addEventListener('ended', (e) => {\n\n          audio[index + 1] && audio[index + 1].play();\n        });\n        return null\n      })\n    });\n  }\n\n  renderChildren = (data) => {\n    if (data.url && data.preview) {\n      return <img src={data.url} alt=\"\" style={{\n        width: '100%'\n      }}/>\n    }\n    if (data.url && data.duration) {\n      return <audio ref={(ref) => {\n        this.audioEl.push(ref);\n      }} src={data.url} controls preload=\"none\" style={{\n        width: '100%'\n      }} id={data.order}/>\n\n    }\n    if (data.preview) {\n      return <p>{data.text}</p>\n    }\n  }\n\n  render() {\n    const {content} = this.state\n    return (\n      <div>\n        <div style={{\n          position: 'fixed',\n          marginTop: window.innerHeight - (100 + 20),\n          width: '100%',\n          height: 100,\n          zIndex: 99,\n        }}>\n          <div style={{\n            textAlign: 'right'\n          }}>\n            <div style={{height: 50}}>\n              <button style={{\n                marginTop:20,\n                width: 50,\n                height: 50,\n                borderBottomLeftRadius: '50%',\n                borderTopRightRadius: '50%',\n                borderTopLeftRadius: '50%',\n                borderBottomRightRadius: '50%',\n              }} onClick={()=>{ console.log(this.props.history.goBack())}}>回列表\n              </button>\n            </div>\n          </div>\n        </div>\n        <div style={{textAlign: 'center'}}>\n          <h4>\n            {\n              content.title\n            }\n          </h4>\n          {\n            content.list.map((item, index) => (\n              <div key={index}>\n                {this.renderChildren(item)}\n              </div>\n            ))\n          }\n\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lessonList: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('/json/menu.json').then((response) => {\n      return response.json();\n    }).then((data)=>{\n      this.setState({\n        lessonList:data\n      })\n    })\n  }\n\n  render() {\n    const { lessonList } = this.state;\n    return(\n      <div style={{textAlign:'center'}}>\n        <h4>课程列表</h4>\n        <ul style={{textAlign:'left'}}>\n          {\n            lessonList.map((item,index)=>(\n              <li key={index}><Link to={`/details/${item.url}`}>{item.title}</Link></li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router,Route } from 'react-router';\nimport './index.css';\nimport App from './App';\nimport List from './List';\nimport * as serviceWorker from './serviceWorker';\nimport { createHashHistory } from 'history'\n\nconst routers = (\n  <Router history={createHashHistory()}>\n    <Route path='/' exact component={List} />\n    <Route path='/details/:url' component={App}/>\n  </Router>\n)\n\nReactDOM.render(routers, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}